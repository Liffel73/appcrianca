"""
Servi√ßo de IA para gera√ß√£o de conte√∫do educativo
"""
import sys
import os
import time
import json
import logging
from typing import List, Dict, Optional

# Adicionar path do Assistente
sys.path.append('./Assistente')
from gemini_client import GeminiClient

logger = logging.getLogger(__name__)


class AIService:
    """Servi√ßo centralizado para gera√ß√£o de conte√∫do com IA"""

    def __init__(self):
        self.gemini_client = GeminiClient()
        logger.info("AIService initialized with Gemini")

    def generate_intro(
        self,
        word: str,
        translation: str,
        room: str,
        environment: str,
        user_age: Optional[int] = None
    ) -> Dict:
        """
        Gera introdu√ß√£o conversacional em portugu√™s

        Returns:
            {
                "intro_text": str,
                "generation_time_ms": int
            }
        """
        start_time = time.time()

        # Adaptar linguagem baseado na idade
        tone = "amig√°vel e simples"
        if user_age:
            if user_age < 10:
                tone = "muito simples e divertido, como para crian√ßas pequenas"
            elif user_age < 14:
                tone = "amig√°vel e educativo, como para pr√©-adolescentes"
            else:
                tone = "claro e direto, como para adolescentes"

        prompt = f"""
Voc√™ √© um professor de ingl√™s {tone} para estudantes brasileiros.

OBJETO: {translation} ({word} em ingl√™s)
LOCALIZA√á√ÉO: {room} na {environment}
{'IDADE DO ALUNO: ' + str(user_age) + ' anos' if user_age else ''}

Crie uma introdu√ß√£o conversacional curta em portugu√™s que:
1. Cumprimente de forma amig√°vel (use 1 emoji apropriado)
2. Apresente o objeto de forma clara e simples
3. Explique para que serve em 1-2 frases
4. Termine perguntando se quer aprender em ingl√™s com emoji üá∫üá∏

FORMATO EXATO:
Ol√°! [emoji] [Esse/Essa] √© [ARTIGO CORRETO] [OBJETO EM MAI√öSCULO], [descri√ß√£o breve]...
[1-2 frases sobre o que √© e para que serve]

Quer aprender como falar isso em ingl√™s? üá∫üá∏

REGRAS IMPORTANTES:
- USE O ARTIGO CORRETO: "Esse √© o sof√°" (masculino) ou "Essa √© a mesa" (feminino)
- Concord√¢ncia de g√™nero correta em portugu√™s
- M√°ximo 4 linhas
- Linguagem {tone}
- Portugu√™s brasileiro natural e gramaticalmente correto
- SEM explica√ß√µes extras, apenas a introdu√ß√£o
"""

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um professor de ingl√™s criativo e motivador. Responda APENAS com a introdu√ß√£o, sem textos adicionais.",
                temperature=0.7
            )

            # P√ìS-PROCESSAR: Corrigir gram√°tica portuguesa automaticamente
            intro_text = response.strip()
            intro_text = self._fix_portuguese_grammar(intro_text, translation)

            generation_time = int((time.time() - start_time) * 1000)

            return {
                "intro_text": intro_text,
                "generation_time_ms": generation_time
            }

        except Exception as e:
            logger.error(f"Error generating intro: {e}")
            # Fallback gen√©rico com artigo correto
            # Usar "o" para palavras terminadas em consoante/o, "a" para terminadas em a
            article = "a" if translation.lower().endswith('a') else "o"
            demonstrative = "Essa √©" if article == "a" else "Esse √©"

            return {
                "intro_text": f"Ol√°! üìö {demonstrative} {article} {translation.upper()}! "
                             f"Usamos no nosso dia a dia aqui na {room}. "
                             f"Quer aprender como falar isso em ingl√™s? üá∫üá∏",
                "generation_time_ms": int((time.time() - start_time) * 1000)
            }

    def _fix_portuguese_grammar(self, text: str, word: str) -> str:
        """
        Corrige gram√°tica portuguesa automaticamente
        Garante concord√¢ncia correta de artigos e demonstrativos
        """
        import re

        # Detectar g√™nero da palavra
        word_lower = word.lower()
        is_feminine = word_lower.endswith('a')

        # Definir artigo e demonstrativo corretos
        if is_feminine:
            correct_article = "a"
            correct_demonstrative = "Essa √©"
            wrong_demonstrative = "Esse √©"
        else:
            correct_article = "o"
            correct_demonstrative = "Esse √©"
            wrong_demonstrative = "Essa √©"

        # Padr√µes comuns de erro
        patterns_to_fix = [
            # "Essa √© o" -> "Esse √© o" (masculino) / "Esse √© a" -> "Essa √© a" (feminino)
            (rf"{wrong_demonstrative}\s+{correct_article}\s+{re.escape(word.upper())}",
             f"{correct_demonstrative} {correct_article} {word.upper()}"),

            # "Essa √© um" -> "Esse √© o" (masculino) / "Esse √© uma" -> "Essa √© a" (feminino)
            (rf"{wrong_demonstrative}\s+uma?\s+{re.escape(word.upper())}",
             f"{correct_demonstrative} {correct_article} {word.upper()}"),

            # "Esse/Essa √© uma/um" com artigo errado
            (rf"(Essa|Esse)\s+√©\s+uma?\s+{re.escape(word.upper())}",
             f"{correct_demonstrative} {correct_article} {word.upper()}"),

            # "Essa √© SOF√Å" (sem artigo) -> "Esse √© o SOF√Å"
            (rf"{wrong_demonstrative}\s+{re.escape(word.upper())}",
             f"{correct_demonstrative} {correct_article} {word.upper()}"),

            # "Esse/Essa √© PALAVRA" (sem artigo) -> "Esse/Essa √© o/a PALAVRA"
            (rf"(Essa|Esse)\s+√©\s+{re.escape(word.upper())}",
             f"{correct_demonstrative} {correct_article} {word.upper()}"),
        ]

        corrected_text = text
        for pattern, replacement in patterns_to_fix:
            corrected_text = re.sub(pattern, replacement, corrected_text, flags=re.IGNORECASE)

        # Log se houve corre√ß√£o
        if corrected_text != text:
            logger.info(f"Gram√°tica corrigida: '{word}' ({correct_article})")
            logger.debug(f"  ANTES: {text[:100]}")
            logger.debug(f"  DEPOIS: {corrected_text[:100]}")

        return corrected_text

    def generate_contextual_phrases(
        self,
        word: str,
        translation: str,
        difficulty: int = 1,
        num_phrases: int = 3,
        situations: Optional[List[str]] = None
    ) -> Dict:
        """
        Gera frases contextuais em diferentes situa√ß√µes

        Returns:
            {
                "phrases": [
                    {
                        "situation": str,
                        "situation_pt": str,
                        "phrase_pt": str,
                        "phrase_en": str,
                        "difficulty": int
                    }
                ],
                "generation_time_ms": int
            }
        """
        start_time = time.time()

        # Definir situa√ß√µes padr√£o se n√£o fornecidas
        if not situations:
            situations = [
                "pedindo permiss√£o (asking permission)",
                "descrevendo a√ß√£o (describing action)",
                "falando sobre rotina (talking about routine)"
            ]

        # Ajustar complexidade baseado na dificuldade
        complexity_guide = {
            1: "Frases simples e curtas (5-7 palavras). Use: 'I', 'you', present simple",
            2: "Frases m√©dias (8-12 palavras). Use: present continuous, 'can', 'have to'",
            3: "Frases completas (13-18 palavras). Use: present perfect, conditionals, relative clauses"
        }

        prompt = f"""
Crie {num_phrases} exemplos de frases usando a palavra "{word}" em ingl√™s.

PALAVRA: {word}
TRADU√á√ÉO: {translation}
N√çVEL: {difficulty}/3
COMPLEXIDADE: {complexity_guide[difficulty]}

SITUA√á√ïES DESEJADAS:
{chr(10).join([f"- {s}" for s in situations[:num_phrases]])}

Para cada frase, forne√ßa:
1. C√≥digo da situa√ß√£o (snake_case em ingl√™s)
2. Nome da situa√ß√£o em portugu√™s
3. Frase em portugu√™s (natural, brasileiro)
4. Frase em ingl√™s (n√≠vel apropriado)

FORMATO JSON (responda APENAS com o JSON):
[
  {{
    "situation": "asking_permission",
    "situation_pt": "Pedindo Permiss√£o",
    "phrase_pt": "frase natural em portugu√™s",
    "phrase_en": "natural English phrase",
    "difficulty": {difficulty}
  }},
  ...
]

REGRAS:
- Frases devem usar "{word}" naturalmente
- Portugu√™s brasileiro coloquial
- Ingl√™s correto e natural
- Adequado para estudantes brasileiros
"""

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um especialista em ensino de ingl√™s. Responda APENAS com o JSON v√°lido, sem explica√ß√µes.",
                temperature=0.5
            )

            # Tentar parsear JSON
            phrases = json.loads(response.strip())

            generation_time = int((time.time() - start_time) * 1000)

            return {
                "phrases": phrases,
                "generation_time_ms": generation_time
            }

        except json.JSONDecodeError as e:
            logger.error(f"JSON parse error: {e}")
            # Fallback com frases gen√©ricas
            return self._get_fallback_phrases(word, translation, difficulty, num_phrases)
        except Exception as e:
            logger.error(f"Error generating phrases: {e}")
            return self._get_fallback_phrases(word, translation, difficulty, num_phrases)

    def _get_fallback_phrases(self, word: str, translation: str, difficulty: int, num: int) -> Dict:
        """Frases de fallback quando a IA falha"""
        fallback_phrases = [
            {
                "situation": "asking_permission",
                "situation_pt": "Pedindo Permiss√£o",
                "phrase_pt": f"Posso usar o {translation}?",
                "phrase_en": f"Can I use the {word}?",
                "difficulty": difficulty
            },
            {
                "situation": "describing_action",
                "situation_pt": "Descrevendo A√ß√£o",
                "phrase_pt": f"Eu estou usando o {translation}",
                "phrase_en": f"I am using the {word}",
                "difficulty": difficulty
            },
            {
                "situation": "talking_routine",
                "situation_pt": "Falando sobre Rotina",
                "phrase_pt": f"Eu uso o {translation} todo dia",
                "phrase_en": f"I use the {word} every day",
                "difficulty": difficulty
            }
        ]

        return {
            "phrases": fallback_phrases[:num],
            "generation_time_ms": 0
        }

    def generate_word_breakdown(self, word: str, include_ipa: bool = True) -> Dict:
        """
        Quebra palavra em s√≠labas com pron√∫ncia

        Returns:
            {
                "word": str,
                "ipa": str,
                "syllables": [
                    {
                        "text": str,
                        "ipa": str,
                        "explanation_pt": str
                    }
                ]
            }
        """
        start_time = time.time()

        prompt = f"""
Analise a palavra em ingl√™s "{word}" e forne√ßa:

1. Transcri√ß√£o fon√©tica IPA completa
2. Divis√£o sil√°bica
3. Pron√∫ncia de cada s√≠laba em IPA
4. Explica√ß√£o simples de cada s√≠laba para brasileiros

FORMATO JSON (responda APENAS com o JSON):
{{
  "word": "{word}",
  "ipa": "/transcri√ß√£o completa/",
  "syllables": [
    {{
      "text": "s√≠-la-ba",
      "ipa": "/IPA/",
      "explanation_pt": "som parecido com 'X' em portugu√™s"
    }}
  ]
}}

REGRAS:
- Use IPA correto
- Explica√ß√µes simples comparando com sons do portugu√™s
- Seja educativo e claro
"""

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um linguista especializado em fon√©tica. Responda APENAS com JSON v√°lido.",
                temperature=0.3
            )

            result = json.loads(response.strip())
            return result

        except Exception as e:
            logger.error(f"Error generating word breakdown: {e}")
            # Fallback simples
            return {
                "word": word,
                "ipa": f"/{word}/",
                "syllables": [
                    {
                        "text": word,
                        "ipa": f"/{word}/",
                        "explanation_pt": f"Pronuncie como est√° escrito: {word}"
                    }
                ]
            }

    def generate_fun_facts(
        self,
        word: str,
        translation: str,
        num_facts: int = 3
    ) -> Dict:
        """
        Gera curiosidades sobre a palavra

        Returns:
            {
                "fun_facts": [str, str, ...],
                "generation_time_ms": int
            }
        """
        start_time = time.time()

        prompt = f"""
Crie {num_facts} curiosidades interessantes sobre "{word}" ({translation} em portugu√™s).

TIPOS DE CURIOSIDADES:
1. Etimologia (origem da palavra)
2. Hist√≥ria ou evolu√ß√£o do objeto
3. Uso cultural (diferen√ßas entre pa√≠ses)
4. Express√µes idiom√°ticas relacionadas
5. Fatos surpreendentes

FORMATO:
Liste {num_facts} curiosidades, uma por linha, come√ßando com emoji apropriado.

REGRAS:
- Informa√ß√µes verdadeiras e educativas
- Linguagem simples para crian√ßas/adolescentes
- Uma frase por curiosidade (m√°ximo 2 linhas)
- Em portugu√™s brasileiro
- Educativo e interessante
"""

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um educador criativo. Forne√ßa curiosidades verdadeiras e verific√°veis.",
                temperature=0.7
            )

            # Dividir por linhas e filtrar vazias
            facts = [
                line.strip()
                for line in response.strip().split('\n')
                if line.strip() and not line.strip().startswith('#')
            ]

            generation_time = int((time.time() - start_time) * 1000)

            return {
                "fun_facts": facts[:num_facts],
                "generation_time_ms": generation_time
            }

        except Exception as e:
            logger.error(f"Error generating fun facts: {e}")
            return {
                "fun_facts": [
                    f"üìö '{word}' √© uma palavra comum em ingl√™s.",
                    f"üåç Pessoas em todo mundo usam '{translation}'.",
                    f"üéì Aprender '{word}' ajuda no seu ingl√™s!"
                ],
                "generation_time_ms": 0
            }

    def generate_quiz(
        self,
        word: str,
        translation: str,
        difficulty: int = 1,
        num_questions: int = 3
    ) -> Dict:
        """
        Gera quiz sobre o objeto

        Returns:
            {
                "title": str,
                "description": str,
                "difficulty": int,
                "questions": [...]
            }
        """
        start_time = time.time()

        prompt = f"""
Crie um quiz de {num_questions} perguntas sobre "{word}" ({translation}).

N√çVEL: {difficulty}/3
TIPOS DE PERGUNTAS:
- M√∫ltipla escolha (4 op√ß√µes)
- Completar frase

FORMATO JSON:
{{
  "title": "Quiz sobre {translation}",
  "description": "descri√ß√£o motivadora",
  "difficulty": {difficulty},
  "questions": [
    {{
      "question_type": "multiple_choice",
      "question_text_pt": "pergunta em portugu√™s",
      "options": ["op√ß√£o1", "op√ß√£o2", "op√ß√£o3", "op√ß√£o4"],
      "correct_answer": "op√ß√£o correta",
      "explanation": "explica√ß√£o da resposta",
      "points": 10
    }}
  ]
}}

REGRAS:
- Perguntas variadas e educativas
- Op√ß√µes plaus√≠veis (n√£o √≥bvias demais)
- Explica√ß√µes claras
- Em portugu√™s brasileiro
"""

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um criador de conte√∫do educativo. Responda APENAS com JSON v√°lido.",
                temperature=0.6
            )

            quiz = json.loads(response.strip())
            return quiz

        except Exception as e:
            logger.error(f"Error generating quiz: {e}")
            # Fallback simples
            return {
                "title": f"Quiz sobre {translation}",
                "description": f"Teste seus conhecimentos sobre '{word}'!",
                "difficulty": difficulty,
                "questions": [
                    {
                        "question_type": "multiple_choice",
                        "question_text_pt": f"Como se diz '{translation}' em ingl√™s?",
                        "options": [word, "outro1", "outro2", "outro3"],
                        "correct_answer": word,
                        "explanation": f"A resposta correta √© '{word}'!",
                        "points": 10
                    }
                ]
            }

    def _clean_json_response(self, response: str) -> str:
        """
        Remove markdown code block wrapper do JSON se existir
        Exemplo: ```json\n{...}\n``` -> {...}
        """
        response = response.strip()

        # Remover ```json ou ``` no in√≠cio
        if response.startswith('```json'):
            response = response[7:]  # Remove '```json'
        elif response.startswith('```'):
            response = response[3:]   # Remove '```'

        # Remover ``` no final
        if response.endswith('```'):
            response = response[:-3]

        return response.strip()

    def chat_with_object(
        self,
        word: str,
        translation: str,
        user_message: str,
        conversation_history: List[Dict] = None,
        user_age: Optional[int] = None
    ) -> Dict:
        """
        Chat conversacional sobre um objeto espec√≠fico

        Args:
            word: Palavra em ingl√™s
            translation: Tradu√ß√£o em portugu√™s
            user_message: Mensagem/pergunta do usu√°rio
            conversation_history: Hist√≥rico de mensagens anteriores
            user_age: Idade do usu√°rio (para adaptar linguagem)

        Returns:
            {
                "bot_response": str,
                "examples": [{"phrase_pt": str, "phrase_en": str}],
                "suggestions": [str],
                "generation_time_ms": int
            }
        """
        start_time = time.time()

        if conversation_history is None:
            conversation_history = []

        # Adaptar tom baseado na idade
        tone = "amig√°vel e educativo"
        if user_age:
            if user_age < 10:
                tone = "muito simples, divertido e encorajador"
            elif user_age < 14:
                tone = "amig√°vel, claro e motivador"
            else:
                tone = "direto, informativo e respeitoso"

        # Construir contexto da conversa
        history_text = ""
        if conversation_history:
            history_text = "\n\nHIST√ìRICO DA CONVERSA:\n"
            for msg in conversation_history[-5:]:  # √öltimas 5 mensagens
                role_label = "Aluno" if msg.get("role") == "user" else "Professor"
                history_text += f"{role_label}: {msg.get('content')}\n"

        prompt = f"""
Voc√™ √© um professor de ingl√™s {tone}, especializado em ensinar para brasileiros.

CONTEXTO:
- Objeto em discuss√£o: {translation} ({word} em ingl√™s)
- Idade do aluno: {user_age or 'n√£o especificada'}
{history_text}

PERGUNTA DO ALUNO:
"{user_message}"

INSTRU√á√ïES:
1. Responda a pergunta de forma clara e educativa
2. Use linguagem {tone}
3. IMPORTANTE: Se o aluno perguntar como dizer/falar algo em ingl√™s, SEMPRE forne√ßa exemplos completos
4. Seja encorajador e positivo
5. Mantenha o foco no objeto "{translation}"

DETEC√á√ÉO DE PERGUNTAS SOBRE TRADU√á√ÉO:
- "como digo/falo/dizer..." ‚Üí Usu√°rio quer aprender a traduzir uma frase
- "como se diz..." ‚Üí Usu√°rio quer aprender a traduzir
- "eu vou/quero..." ‚Üí Usu√°rio quer saber como expressar uma a√ß√£o em ingl√™s
- NESSES CASOS: Sempre forne√ßa 2-3 exemplos de frases em portugu√™s e ingl√™s

FORMATO DA RESPOSTA (JSON):
{{
  "bot_response": "sua resposta conversacional em portugu√™s (2-4 frases, max 100 palavras)",
  "examples": [
    {{"phrase_pt": "frase exemplo em portugu√™s", "phrase_en": "example phrase in English"}},
    ...
  ],
  "suggestions": [
    "sugest√£o de pr√≥xima pergunta 1",
    "sugest√£o de pr√≥xima pergunta 2",
    "sugest√£o de pr√≥xima pergunta 3"
  ]
}}

REGRAS:
- bot_response: Sempre em portugu√™s brasileiro, conversacional e motivador
- examples: SEMPRE forne√ßa exemplos quando a pergunta for sobre como dizer/usar/falar algo
- suggestions: 3 sugest√µes de perguntas relacionadas ao tema
- Se for pergunta sobre tradu√ß√£o/uso, examples NUNCA deve estar vazio
- Responda APENAS com o JSON, sem texto extra ou markdown
"""

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um professor de ingl√™s interativo e motivador. Responda APENAS com JSON v√°lido, sem explica√ß√µes adicionais.",
                temperature=0.7
            )

            # Limpar resposta (remover markdown wrapper se existir)
            clean_response = self._clean_json_response(response)

            # Parse JSON
            result = json.loads(clean_response)

            generation_time = int((time.time() - start_time) * 1000)
            result["generation_time_ms"] = generation_time

            return result

        except json.JSONDecodeError as e:
            logger.error(f"JSON parse error in chat: {e}")
            logger.error(f"Raw response: {response}")
            return self._get_fallback_chat_response(user_message, word, translation)
        except Exception as e:
            logger.error(f"Error in chat_with_object: {e}")
            return self._get_fallback_chat_response(user_message, word, translation)

    def _get_fallback_chat_response(self, user_message: str, word: str, translation: str) -> Dict:
        """Resposta de fallback quando a IA falha"""

        # Detectar tipo de pergunta
        msg_lower = user_message.lower()

        if any(keyword in msg_lower for keyword in ["frase", "exemplo", "usar"]):
            return {
                "bot_response": f"√ìtima pergunta! Aqui est√£o alguns exemplos de como usar '{translation}' em frases:",
                "examples": [
                    {"phrase_pt": f"Eu uso o {translation}", "phrase_en": f"I use the {word}"},
                    {"phrase_pt": f"O {translation} √© √∫til", "phrase_en": f"The {word} is useful"}
                ],
                "suggestions": [
                    "Como pronunciar essa palavra?",
                    "Me conte uma curiosidade!",
                    "Tem outras palavras parecidas?"
                ],
                "generation_time_ms": 0
            }
        elif any(keyword in msg_lower for keyword in ["pronuncia", "como fala", "pron√∫ncia"]):
            return {
                "bot_response": f"'{word}' se pronuncia de forma bem parecida com est√° escrito! Clique no bot√£o de √°udio para ouvir a pron√∫ncia correta. üîä",
                "examples": [],
                "suggestions": [
                    "Como usar em uma frase?",
                    "Qual a diferen√ßa entre palavras similares?",
                    "Me conte uma curiosidade!"
                ],
                "generation_time_ms": 0
            }
        else:
            return {
                "bot_response": f"Interessante! '{word}' ({translation}) √© uma palavra muito √∫til em ingl√™s. O que mais voc√™ gostaria de saber sobre ela?",
                "examples": [],
                "suggestions": [
                    "Como usar em uma frase?",
                    "Como se pronuncia?",
                    "Me conte uma curiosidade!"
                ],
                "generation_time_ms": 0
            }

    def generate_game(
        self,
        game_type: str,
        word: str,
        translation: str,
        difficulty: str = "easy"
    ) -> Dict:
        """
        Gera jogos interativos com vocabul√°rio relacionado ao objeto

        IMPORTANTE: Usa vocabul√°rio RELACIONADO ao objeto, n√£o apenas o objeto em si!
        Exemplos:
        - sofa ‚Üí cushion/almofada, fabric/tecido, armrest/bra√ßo, sit/sentar
        - table ‚Üí chair/cadeira, tablecloth/toalha de mesa, legs/pernas
        - TV ‚Üí remote/controle, screen/tela, button/bot√£o, watch/assistir

        Args:
            game_type: 'guess_word', 'anagram', 'quick_quiz', 'missing_letters'
            word: Palavra principal em ingl√™s
            translation: Tradu√ß√£o em portugu√™s
            difficulty: 'easy', 'medium', 'hard'

        Returns:
            Dict com dados espec√≠ficos do tipo de jogo
        """
        start_time = time.time()

        # Prompts espec√≠ficos por tipo de jogo
        if game_type == "guess_word":
            prompt = f"""
Crie um jogo estilo TERMO/WORDLE com palavra RELACIONADA a "{translation}" ({word}).

IMPORTANTE: A palavra DEVE ter EXATAMENTE 5 LETRAS e ser relacionada ao objeto!
Exemplos de palavras de 5 letras:
- Para "sofa": chair, cover, relax, couch
- Para "table": plate, cloth, chair, spoon
- Para "TV": watch, sound, cable, pixel, video

FORMATO JSON (responda APENAS com o JSON):
{{
  "word_to_guess": "chair",
  "translation": "cadeira",
  "hint": "Objeto usado junto com uma mesa",
  "max_attempts": 6,
  "category": "Relacionado a {translation}"
}}

REGRAS CR√çTICAS:
1. A palavra DEVE ter EXATAMENTE 5 LETRAS (n√£o mais, n√£o menos!)
2. Use vocabul√°rio RELACIONADO a {translation} (n√£o a palavra principal)
3. Escolha palavras comuns e conhecidas
4. D√™ UMA dica clara mas n√£o √≥bvia
5. Responda APENAS com o JSON, sem markdown
"""

        elif game_type == "anagram":
            prompt = f"""
Crie um jogo de anagrama com palavra RELACIONADA a "{translation}" ({word}).

IMPORTANTE: Use vocabul√°rio RELACIONADO ao objeto!
Exemplos: cushion, remote, fabric, screen, chair, tablecloth

FORMATO JSON (responda APENAS com o JSON):
{{
  "word": "cushion",
  "translation": "almofada",
  "scrambled": "iucohsn",
  "hint": "Objeto macio que deixa o sof√° mais confort√°vel",
  "category": "Relacionado a {translation}"
}}

REGRAS:
1. Palavra de 5-8 letras relacionada a {translation}
2. Embaralhe bem as letras
3. Dica clara mas n√£o √≥bvia
4. Responda APENAS com o JSON, sem markdown
"""

        elif game_type == "quick_quiz":
            prompt = f"""
Crie 5 perguntas r√°pidas sobre vocabul√°rio RELACIONADO a "{translation}" ({word}).

IMPORTANTE: Perguntas sobre acess√≥rios, partes, a√ß√µes relacionadas!
Exemplos:
- "O que voc√™ usa para mudar de canal na TV?"
- "Como se chama a parte macia do sof√° onde voc√™ apoia a cabe√ßa?"
- "Qual objeto voc√™ coloca sobre a mesa para proteg√™-la?"

FORMATO JSON (responda APENAS com o JSON):
{{
  "questions": [
    {{
      "question": "O que voc√™ usa para controlar a TV de longe?",
      "options": ["remote", "screen", "cable", "button"],
      "correct_answer": "remote",
      "translation": "controle"
    }},
    ... (5 perguntas no total)
  ],
  "time_per_question": 10,
  "category": "Vocabul√°rio relacionado a {translation}"
}}

REGRAS:
1. 5 perguntas sobre vocabul√°rio relacionado
2. 4 op√ß√µes cada (todas relacionadas ao contexto)
3. Perguntas em portugu√™s, respostas em ingl√™s
4. Responda APENAS com o JSON, sem markdown
"""

        elif game_type == "missing_letters":
            prompt = f"""
Crie um jogo de completar letras com palavra RELACIONADA a "{translation}" ({word}).

IMPORTANTE: Use vocabul√°rio RELACIONADO!
Exemplos: c_sh_on (cushion), r_m_t_ (remote), f_br_c (fabric)

FORMATO JSON (responda APENAS com o JSON):
{{
  "word": "cushion",
  "translation": "almofada",
  "pattern": "c_sh__n",
  "hint": "Objeto macio usado no sof√° para conforto",
  "missing_letters": ["u", "i", "o"],
  "category": "Relacionado a {translation}"
}}

REGRAS:
1. Palavra de 5-9 letras relacionada a {translation}
2. Remova 3-4 letras (use _ no lugar)
3. Dica clara sobre a palavra
4. Liste as letras que faltam
5. Responda APENAS com o JSON, sem markdown
"""

        else:
            # Fallback para tipo desconhecido
            return self._get_fallback_game(game_type, word, translation)

        try:
            response = self.gemini_client.generate_response(
                prompt,
                system_instruction="Voc√™ √© um criador de jogos educativos. Responda APENAS com JSON v√°lido. Use vocabul√°rio RELACIONADO ao objeto, n√£o apenas o objeto em si!",
                temperature=0.8
            )

            # Limpar resposta
            clean_response = self._clean_json_response(response)
            result = json.loads(clean_response)

            # Adicionar metadados
            result["game_type"] = game_type
            result["difficulty"] = difficulty
            result["generation_time_ms"] = int((time.time() - start_time) * 1000)

            logger.info(f"Game generated: {game_type} for {word}")
            return result

        except Exception as e:
            logger.error(f"Error generating game {game_type}: {e}")
            return self._get_fallback_game(game_type, word, translation)

    def _get_fallback_game(self, game_type: str, word: str, translation: str) -> Dict:
        """Jogos de fallback quando a IA falha"""

        # Vocabul√°rio relacionado padr√£o por categoria
        related_vocab = {
            "sofa": [
                {"en": "cushion", "pt": "almofada"},
                {"en": "armrest", "pt": "bra√ßo"},
                {"en": "fabric", "pt": "tecido"}
            ],
            "table": [
                {"en": "chair", "pt": "cadeira"},
                {"en": "tablecloth", "pt": "toalha de mesa"},
                {"en": "surface", "pt": "superf√≠cie"}
            ],
            "tv": [
                {"en": "remote", "pt": "controle"},
                {"en": "screen", "pt": "tela"},
                {"en": "button", "pt": "bot√£o"}
            ]
        }

        # Usar palavras relacionadas padr√£o ou gen√©ricas
        related_words = related_vocab.get(word.lower(), [
            {"en": "part", "pt": "parte"},
            {"en": "use", "pt": "usar"},
            {"en": "object", "pt": "objeto"}
        ])

        related_word = related_words[0]

        if game_type == "guess_word":
            return {
                "game_type": "guess_word",
                "word_to_guess": related_word["en"],
                "translation": related_word["pt"],
                "hints": [
                    f"√â algo relacionado ao {translation}",
                    f"Voc√™ encontra perto ou em um {translation}",
                    f"Em portugu√™s chamamos de {related_word['pt']}"
                ],
                "max_attempts": 3,
                "category": f"Relacionado a {translation}",
                "difficulty": "easy",
                "generation_time_ms": 0
            }

        elif game_type == "anagram":
            return {
                "game_type": "anagram",
                "word": related_word["en"],
                "translation": related_word["pt"],
                "scrambled": related_word["en"][::-1],  # Simplesmente inverter
                "hint": f"Relacionado ao {translation}",
                "category": f"Relacionado a {translation}",
                "difficulty": "easy",
                "generation_time_ms": 0
            }

        elif game_type == "quick_quiz":
            return {
                "game_type": "quick_quiz",
                "questions": [
                    {
                        "question": f"Como se diz {translation} em ingl√™s?",
                        "options": [word, "other1", "other2", "other3"],
                        "correct_answer": word,
                        "translation": translation
                    }
                ],
                "time_per_question": 10,
                "category": f"Vocabul√°rio de {translation}",
                "difficulty": "easy",
                "generation_time_ms": 0
            }

        elif game_type == "missing_letters":
            return {
                "game_type": "missing_letters",
                "word": related_word["en"],
                "translation": related_word["pt"],
                "pattern": related_word["en"][0] + "_" * (len(related_word["en"]) - 2) + related_word["en"][-1],
                "hint": f"Relacionado ao {translation}",
                "missing_letters": list(related_word["en"][1:-1]),
                "category": f"Relacionado a {translation}",
                "difficulty": "easy",
                "generation_time_ms": 0
            }

        return {
            "game_type": game_type,
            "error": "Game type not supported",
            "generation_time_ms": 0
        }
